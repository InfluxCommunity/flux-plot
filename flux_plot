#!/usr/bin/env python3

import argparse
import influxdb_client
import matplotlib.pyplot as plt

args_parser = argparse.ArgumentParser(prog="flux_plot", 
                                    description='Retrieve and plot results from InfluxDB', 
                                    add_help=True)

args_parser.add_argument('-f',
                         '--file',
                         required=False,
                         help='read flux query from file')

args_parser.add_argument('-q',
                         '--query',
                         required=False,
                         help='query to execute, ignored if supplied via file (-f, --file) argument')

args_parser.add_argument('-t',
                         '--token',
                         required=True,
                         help='read token for InfluxDB accoubnt')

args_parser.add_argument('-o',
                         '--organization',
                         required=True,
                         help='org name for InfluxDB account')
args_parser.add_argument('-u',
                         '--host',
                         required=True,
                         help='URL for InfluxDB account')

args_parser.add_argument('-v',
                         '--verbose',
                         nargs='?',
                         const=1,
                         required=False,
                         help='Also print raw Python records to standard out',)

args_parser.add_argument('-n',
                         '--output-name',
                         type=str,
                         default="results",
                         required=False,
                         help='String to use when creating file names. If ommitted, \"results\" will be used. Output files will be in the form of ${output_name}_data.png',)
                        
args_parser.add_argument('--xaxis',
                         required=False,
                         help='X axis label',)

args_parser.add_argument('--yaxis',
                         required=False,
                         help='Y axis label',)

args_parser.add_argument('--title',
                         required=False,
                         help='Title',)

args_parser.add_argument('-l',
                        '--legend-col',
                         required=False,
                         help='Collumn to use in legend of the graph for the data',)

args_parser.add_argument('--height',
                         required=False,
                         help='Figure height (in inches)',)

args_parser.add_argument('--width',
                         required=False,
                         help='Figure width (in inches)',)

args = args_parser.parse_args()


if args.file == None and args.query == None:
    print("No query supplied")
    exit(0)

if args.file != None:
    query = open(args.file, 'r').read()

else:
    query = args.query

if args.verbose != None:
    print("query to execute: {}".format(query))
    print()
    print(args)
    print()

client = influxdb_client.InfluxDBClient(
    url=args.host,
    token=args.token,
    org=args.organization
)
query_api = client.query_api()

result = query_api.query(query, org=args.organization)

fig = plt.figure()

if args.height !=None:
    fig.set_figheight(int(args.height))

if args.width !=None:
    fig.set_figwidth(int(args.width))

if args.xaxis != None:
    plt.xlabel(args.xaxis)

if args.yaxis != None:
    plt.ylabel(args.yaxis)

if args.title != None:
    plt.title(args.title)

plt.xlabel

def plot_data_tables(tables):
    for table in tables:
        if(args.verbose != None):
            print(table)
            print()

        x_vals = []
        y_vals = []
        label = ""

        for record in table.records:
            y_vals.append(record["_value"])
            x_vals.append(record["_time"])
            if args.legend_col != None:
                label = record[args.legend_col]

        plt.plot(x_vals, y_vals, label=label)
    if args.legend_col != None:
        plt.legend()

    plt.savefig(f"{args.output_name}_data.png")
    
data_tables = []
profiler_tables = []

for table in result:
    data_table = True
    if len(table.records) > 0:
        #make sure this is not a profiler table
        # legit tables don't require a measurement, so pass on KeyError
        try:
            if table.records[0].get_measurement() == "profiler/query" or table.records[0].get_measurement() == "profiler/operator":
                profiler_tables.append(table)
                data_table = False
                
        except KeyError:
            pass
        if data_table:
            data_tables.append(table)
if(args.verbose != None):
    print(f"${len(data_tables)} data tables found")
    print(f"${len(profiler_tables)} profiler results tables found")
plot_data_tables(data_tables)


