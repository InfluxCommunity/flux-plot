#!/usr/bin/env python3

import argparse
import influxdb_client
import matplotlib.pyplot as plt

args_parser = argparse.ArgumentParser(prog="flux_plot", 
                                    description='Retrieve and plot results from InfluxDB', 
                                    add_help=True)

args_parser.add_argument('-f',
                         '--file',
                         required=False,
                         help='read flux query from file')

args_parser.add_argument('-q',
                         '--query',
                         required=False,
                         help='query to execute, ignored if supplied via file (-f, --file) argument')

args_parser.add_argument('-t',
                         '--token',
                         required=True,
                         help='read token for InfluxDB accoubnt')
args_parser.add_argument('-o',
                         '--organization',
                         required=True,
                         help='org name for InfluxDB account')
args_parser.add_argument('-u',
                         '--host',
                         required=True,
                         help='URL for InfluxDB account')

args_parser.add_argument('-v',
                         '--verbose',
                         nargs='?',
                         const=1,
                         required=False,
                         help='Also print raw Python records to standard out',)

args_parser.add_argument('-s',
                         '--save',
                         required=False,
                         help='Output file name. If ommitted, no file will be created.',)
                        
args_parser.add_argument('--xaxis',
                         required=False,
                         help='X axis label',)

args_parser.add_argument('--yaxis',
                         required=False,
                         help='Y axis label',)

args_parser.add_argument('--title',
                         required=False,
                         help='Title',)

args_parser.add_argument('-l',
                        '--legend-col',
                         required=False,
                         help='Collumn to use in legend',)

args_parser.add_argument('--height',
                         required=False,
                         help='Figure height (in inches)',)

args_parser.add_argument('--width',
                         required=False,
                         help='Figure width (in inches)',)

args_parser.add_argument('--no-display',
                         nargs='?',
                         const=1,
                         required=False,
                         help='Skip displaying the graph interactively',)

args = args_parser.parse_args()

if args.file == None and args.query == None:
    print("No query supplied")
    exit(0)

if args.no_display != None and args.save == None:
    print("Skipping display and no save file specified")
    exit(0)

if args.file != None:
    query = open(args.file, 'r').read()

else:
    query = args.query

if args.verbose != None:
    print("query to execute: {}".format(query))
    print()
    print(args)
    print()

client = influxdb_client.InfluxDBClient(
    url=args.host,
    token=args.token,
    org=args.organization
)
query_api = client.query_api()

result = query_api.query(query, org=args.organization)

fig = plt.figure()

if args.height !=None:
    fig.set_figheight(int(args.height))

if args.width !=None:
    fig.set_figwidth(int(args.width))

if args.xaxis != None:
    plt.xlabel(args.xaxis)

if args.yaxis != None:
    plt.ylabel(args.yaxis)

if args.title != None:
    plt.title(args.title)

plt.xlabel
for table in result:
    x_vals = []
    y_vals = []
    label = ""

    for record in table:
        if args.verbose != None:
            print(record)
        y_vals.append(record["_value"])
        x_vals.append(record["_time"])
        if args.legend_col != None:
            label = record[args.legend_col]
    plt.plot(x_vals, y_vals, label=label)

if args.legend_col != None:
    plt.legend()

if args.save != None:
    if args.verbose != None:
        print("Saving to file: {}".format(args.save) )
    plt.savefig(args.save)

if args.no_display == None:
    plt.show()



